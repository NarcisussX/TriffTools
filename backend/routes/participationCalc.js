const express = require("express");
const fs = require("fs/promises");
const path = require("path");
const router = express.Router();

function calculateSiteISK(siteName, baseISK, usedDread, drifterRan) {
  if (!["Core Garrison", "Core Stronghold", "Oruze Osobnyk", "Quarantine Area",
        "Core Bastion", "Core Citadel", "Strange Energy Readings", "The Mirror"].includes(siteName)) {
    return baseISK;
  }

  if (!drifterRan) {
    baseISK -= usedDread ? 300_000_000 : 100_000_000;
  }

  return baseISK;
}

// Drifter bonus applies only to these COMBAT sites
const drifterCombatSites = [
  "Core Garrison","Core Stronghold","Oruze Osobnyk","Quarantine Area",
  "Core Bastion","Core Citadel","Strange Energy Readings","The Mirror",
];


function adjustedSiteISK(siteTier, siteName, baseISK, usedDread, drifterRan) {
  // Only C5/C6 have Dread/Drifter adjustments
  if (siteTier !== "C5" && siteTier !== "C6") return baseISK;

  let out = baseISK;

  // DREAD bonus applies to ALL C5/C6 sites (combat and non-combat)
  if (usedDread) {
    out += siteTier === "C5" ? 105_000_000 : 140_000_000;
  }

  // DRIFTER bonus applies ONLY to combat sites
  if (drifterRan && drifterCombatSites.includes(siteName)) {
    // If a dread was used, drifter bonus is 300m. Otherwise 100m.
    out += usedDread ? 300_000_000 : 100_000_000;
  }

  return out;
}


router.post("/participation-calc", async (req, res) => {
  const { siteTier, players, siteTotals = {}, usedDread = false, drifterRan = true, accounting = 5 } = req.body;

  try {
    const tiers = ["combat", "datarelic"];
    let allSites = [];

    for (let tier of tiers) {
const filePath = path.join(
  __dirname,
  "data",
  `${siteTier.toLowerCase()}_${tier}_sites_clean.json`
);
try {
  const content = await fs.readFile(filePath, "utf-8");
  const data = JSON.parse(content);
  allSites = [...allSites, ...data];
} catch (err) {
  console.error("Failed reading:", filePath, err);
  throw err;
}

    }

    const siteMap = {};
    for (let site of allSites) {
      siteMap[site.site] = site.blue_loot_isk;
    }

    const playerTotals = {};
    let totalISK = 0;

for (let [siteName, isk] of Object.entries(siteMap)) {
  // Collect who participated and how many times (for this site)
  const perPlayerRuns = {};
  let participantCountsTotal = 0;

  for (const player of players) {
    const runs = Number(player?.participation?.[siteName] || 0);
    if (runs > 0) {
      perPlayerRuns[player.name] = runs;
      participantCountsTotal += runs;
    }
  }

  // Authoritative “Number Ran” for this site type (from the UI)
  const runsForSite = Number(siteTotals?.[siteName] || 0);

  // If the site wasn’t actually run, or nobody participated, skip
  if (runsForSite <= 0 || participantCountsTotal <= 0) continue;

  // ISK per one instance of this site (handles C5/C6 dread/drifter)
  const siteISKPerInstance = adjustedSiteISK(siteTier, siteName, isk, usedDread, drifterRan);

  // Total ISK generated by this site type across all runs
  const totalSiteISK = siteISKPerInstance * runsForSite;

  // Allocate proportionally by runs / sum(runs)
  for (const [name, runs] of Object.entries(perPlayerRuns)) {
    const ratio = (Number(runs) || 0) / participantCountsTotal;
    const add = totalSiteISK * ratio;
    playerTotals[name] = (playerTotals[name] || 0) + add;
    totalISK += add;
  }
}


    const taxRate = 7.5 - 0.462 * accounting;
    const taxMult = 1 - taxRate / 100;

    const payouts = Object.entries(playerTotals).map(([name, value]) => ({
      name,
      payout: Math.round(value * taxMult)
    }));

    res.json({ totalISK: Math.round(totalISK), taxRate, payouts });
  } catch (e) {
    console.error("Error calculating participation payout:", e);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
