version: "3.8"

services:
  triffnix:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        node ./backend/seedOnStart.js &&
        node ./backend/index.js
      "
    ports:
      - "3000:3000"
    networks:
      - web
    env_file:
      - .env
    labels:
    - traefik.enable=true
    - traefik.http.routers.triffnix.rule=Host(`triffnix.com`, `www.triffnix.com`)
    - traefik.http.routers.triffnix.entrypoints=web,websecure
    - traefik.http.routers.triffnix.tls=true
    - traefik.http.routers.triffnix.tls.certresolver=myresolver
    - traefik.http.services.triffnix.loadbalancer.server.port=3000

  postgres:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5

    environment:
      POSTGRES_DB: triffnix
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - web
  market-arbitrage:
    build: ./market-arbitrage
    environment:
      - DATABASE_URL=postgres://user:pass@postgres:5432/triffnix
      - PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.market-arbitrage.rule=PathPrefix(`/api/market`)
      - traefik.http.routers.market-arbitrage.entrypoints=web
      - traefik.http.services.market-arbitrage.loadbalancer.server.port=3002
    networks:
      - web
  traefik:
    image: traefik:v2.11
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@triffnix.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - web

networks:
  web:
    #external: true

volumes:
  postgres-data:
